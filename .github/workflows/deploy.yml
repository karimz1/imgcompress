name: Pipeline for imgcompress

on:
  push:
    branches:
      - main
      - feature/*
      - bugfix/*
      - enhancements/*
  pull_request:

jobs:
  test-backend:
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            platform: linux/amd64
          - os: ubuntu-latest
            platform: linux/arm64
          - os: ubuntu-latest
            platform: linux/arm/v7

          # macOS targets (Docker still builds Linux images)
          - os: macos-latest
            platform: linux/amd64
          - os: macos-latest
            platform: linux/arm64

          # Windows target (using WSL2 / Linux containers)
          - os: windows-latest
            platform: linux/amd64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install tree
        shell: bash
        run: |
          # Use the appropriate package manager per OS
          if [[ "$(uname)" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y tree
          elif [[ "$(uname)" == "Darwin" ]]; then
            brew install tree || echo "tree already installed"
          else
            # On Windows (using bash) install via chocolatey if needed
            choco install tree -y || echo "tree already installed"
          fi

      - name: List Repository Contents
        shell: bash
        run: |
          echo "===== Root Directory ====="
          pwd
          tree -L 2
          echo "===== End Root Directory ====="

          echo "===== tests Directory ====="
          if [ -d "tests" ]; then
            cd tests
            pwd
            tree -L 2
            cd ..
          else
            echo "tests directory does not exist."
          fi
          echo "===== End tests Directory ====="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        shell: bash
        run: |
          cd .devcontainer/
          # Use the matrix value to build for the proper platform
          docker build --platform ${{ matrix.platform }} --no-cache -t devcontainer:local-test .

      - name: Run Tests
        shell: bash
        run: |
          docker run --rm \
            --entrypoint /bin/sh \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd):/app/" \
            -e IS_RUNNING_IN_GITHUB_ACTIONS=true \
            --name devcontainer \
            devcontainer:local-test /app/runTests.sh

      - name: Upload Pytest Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: reports/test-results.xml

  test-e2e:
    # Use the same matrix as test-backend so that e2e tests run for each target
    needs: test-backend
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            platform: linux/amd64
          - os: ubuntu-latest
            platform: linux/arm64
          - os: ubuntu-latest
            platform: linux/arm/v7
            
          # macOS targets
          - os: macos-latest
            platform: linux/amd64
          - os: macos-latest
            platform: linux/arm64

          # Windows target
          - os: windows-latest
            platform: linux/amd64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Build Application Container Image
        shell: bash
        run: |
          docker build --platform ${{ matrix.platform }} --no-cache -t karimz1/imgcompress:local-test .

      - name: Run Application Container (Host Networking)
        shell: bash
        run: |
          docker run --rm -d \
            --network host \
            --name app_$(date +%s) \
            karimz1/imgcompress:local-test web

      - name: Wait for Application to be Ready (using localhost)
        shell: bash
        run: |
          BASE_URL="http://localhost:5000"
          echo "Waiting for the application to be ready on ${BASE_URL}..."
          max_attempts=120
          attempt_num=1
          until curl -s --fail "$BASE_URL" > /dev/null; do
            if [ "$attempt_num" -eq "$max_attempts" ]; then
              echo "Application failed to start after $max_attempts attempts."
              exit 1
            fi
            echo "Waiting for app... attempt $attempt_num"
            attempt_num=$((attempt_num+1))
            sleep 1
          done
          echo "Application is up! Continuing..."

      - name: Build Dev Container Image
        shell: bash
        run: |
          cd .devcontainer/
          docker build --platform ${{ matrix.platform }} --no-cache -t devcontainer:local-test .

      - name: Run E2E Tests in Dev Container (Host Networking)
        shell: bash
        run: |
          docker run --rm \
            --entrypoint /bin/sh \
            --network host \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$(pwd):/app/" \
            -e IS_RUNNING_IN_GITHUB_ACTIONS=true \
            -e PLAYWRIGHT_BASE_URL=http://localhost:5000 \
            --name devcontainer_e2e_$(date +%s) \
            devcontainer:local-test -c "/app/run-e2e.sh"

      - name: Zip E2E Test Results
        shell: bash
        run: zip -r e2e-test-results.zip frontend/e2e-test-results

      - name: Upload E2E Test Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: e2e-test-results.zip

  deploy-image-to-dockerhub:
    needs: test-e2e
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Define Tags
        id: define-tags
        shell: bash
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "ADDITIONAL_TAG=karimz1/imgcompress:latest" >> $GITHUB_ENV
          else
            echo "ADDITIONAL_TAG=karimz1/imgcompress:beta" >> $GITHUB_ENV
          fi

      - name: Build Docker Image and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          # Build multi-architecture images for Linux
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ env.ADDITIONAL_TAG }}
