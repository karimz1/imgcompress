name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/*
      - bugfix/*
      - enhancements/*
  pull_request:

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install tree & List Repository Structure
        run: |
          sudo apt-get update && sudo apt-get install -y tree
          echo "===== Root Directory ====="
          tree -L 2
          echo "===== End Root Directory ====="
          echo "===== tests Directory ====="
          if [ -d "tests" ]; then
            tree -L 2 tests
          else
            echo "tests directory does not exist."
          fi
          echo "===== End tests Directory ====="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Dev Container Image
        working-directory: .devcontainer
        run: docker build --no-cache -t devcontainer:local-test .

      - name: Run Unit & Integration Tests in Dev Container
        run: |
          docker run --rm \
            --entrypoint /bin/bash \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${{ github.workspace }}:/app" \
            -e IS_RUNNING_IN_GITHUB_ACTIONS=true \
            devcontainer:local-test /app/runTests.sh

      - name: Upload Pytest Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: reports/test-results.xml

  e2e-test:
    needs: backend-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Application Docker Image for E2E
        run: docker build --no-cache -t karimz1/imgcompress:local-test .

      - name: Build Dev Container Image
        working-directory: .devcontainer
        run: docker build --no-cache -t devcontainer:local-test .

      - name: Create Docker Network
        run: docker network create e2e-net

      - name: Run Application Container
        run: |
          docker run --rm -d \
            --network e2e-net \
            --name app \
            -p 5000:5000 \
            karimz1/imgcompress:local-test web

      - name: Wait for Application to be Ready
        run: |
          echo "Waiting for the application to be ready on port 5000..."
          for i in {1..30}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Application is up!"
              exit 0
            fi
            sleep 1
          done
          echo "Application did not start in time." && exit 1

      - name: Run E2E Tests in Dev Container
        run: |
          docker run --rm \
            --network e2e-net \
            -v "$(pwd):/workspaces/imgcompress" \
            -w /workspaces/imgcompress/frontend \
            -e PLAYWRIGHT_BASE_URL=http://app:5000 \
            devcontainer:local-test \
            sh -c "npm install && npm run test:e2e"


      - name: "Cleanup: Stop App Container and Remove Network"
        if: always()
        run: |
          docker stop app || true
          docker network rm e2e-net || true

  deploy-docker-image:
    needs: e2e-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Define Docker Image Tag
        id: define-tags
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "ADDITIONAL_TAG=karimz1/imgcompress:latest" >> $GITHUB_ENV
          else
            echo "ADDITIONAL_TAG=karimz1/imgcompress:beta" >> $GITHUB_ENV
          fi

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.ADDITIONAL_TAG }}
